<?xml version="1.0"?>
<project name="NOS"
		 default="all"
		 xmlns="http://nant.sf.net/release/0.86-beta1/nant.xsd">

	<!-- Tasks that run on every build.
	________________________________________________________________________________________________________________ -->
	<!-- Load default configuration. -->
	<if test="${file::exists('default.properties')}">
		<echo message="Loading default.properties" />
		<include buildfile="default.properties" />
	</if>

	<!-- Load developer-specific configuration. -->
	<if test="${file::exists('local.properties')}">
		<echo message="Loading local.properties" />
		<include buildfile="local.properties" />
	</if>

	<echo message="Build configuration:" />
	<script language="C#">
		<code>
			<![CDATA[
				public static void ScriptMain(Project project)
				{
					System.Collections.Generic.SortedDictionary<string, string> sortedByKey = new System.Collections.Generic.SortedDictionary<string, string>();
					foreach(DictionaryEntry de in project.Properties)
					{
						sortedByKey.Add(de.Key.ToString(), de.Value.ToString());
					}

					NAnt.Core.Tasks.EchoTask echo = new NAnt.Core.Tasks.EchoTask();
					echo.Project = project;
					foreach(System.Collections.Generic.KeyValuePair<string, string> kvp in sortedByKey)
					{
						if(kvp.Key.StartsWith("nant."))
						{
							continue;
						}

						string value = kvp.Value;
						if (value.Length > 100)
						{
							value = String.Format("{0}...", value.Substring(0, 100));
						}

						echo.Message = String.Format("{0}: {1}", kvp.Key, value);
						echo.Execute();
					}
				}
			]]>
		</code>
	</script>

	<target name="all"
			depends="build-plugins, build-theme, run-tests, build-setup"
			description="Compiles the theme and creates deployment packages.">
	</target>

	<!-- Build number retrieval.
	________________________________________________________________________________________________________________ -->
	<target name="get-build-number-from-file"
			description="Reads the version number from VersionInfo.cs.">
		<script language="C#">
			<code>
				<![CDATA[
				public static void ScriptMain(Project project)
				{
					string file = String.Empty;
					using (StreamReader sr = new StreamReader(Path.Combine(project.Properties["basedir.source"], "VersionInfo.cs")))
					{
						file = sr.ReadToEnd();
					}

					project.Properties["build.number.fromfile"] = Regex.Match(file, "(?<=\\[assembly:\\s*AssemblyVersion(?:Attribute)?\\(\")\\d+\\.\\d+\\.\\d+\\.\\d+").Value;
				}
				]]>
			</code>
		</script>
	</target>

	<!-- Templating.
	________________________________________________________________________________________________________________ -->
	<fileset id="templates">
		<include name="${basedir.app}\**\*.template" />
	</fileset>

	<filterchain id="template-filter">
		<replacetokens>
			<token key="app.pagechangealerts"
				   value="${app.pagechangealerts}" />
		</replacetokens>
	</filterchain>

	<target name="process-templates">
		<foreach item="File"
				 property="template">
			<in>
				<items refid="templates" />
			</in>
			<do>
				<copy file="${template}"
					  tofile="${path::change-extension(template, '')}"
					  overwrite="true"
					  inputencoding="utf-8"
					  outputencoding="utf-8">
					<filterchain refid="template-filter" />
				</copy>
			</do>
		</foreach>
	</target>

	<!-- Cleanup.
	________________________________________________________________________________________________________________ -->
	<target name="clean"
			description="Removes build artifacts.">
		<delete dir="${basedir.deployment.artifacts}"
				failonerror="false" />
		<delete dir="${basedir.temp}"
				failonerror="false" />
		<foreach item="Folder"
				 property="folder"
				 unless="${property::exists('quick')}">
			<in>
				<items>
					<include name="${basedir.app}\**" />
					<include name="${basedir.test}\**" />
				</items>
			</in>
			<do>
				<delete dir="${folder}\bin"
						failonerror="false" />
				<delete dir="${folder}\obj"
						failonerror="false" />
			</do>
		</foreach>

		<foreach item="File"
				 property="template-result">
			<in>
				<items refid="templates" />
			</in>
			<do>
				<delete file="${path::change-extension(template-result, '')}" />
			</do>
		</foreach>
	</target>

	<!-- Plugins.
	________________________________________________________________________________________________________________ -->
	<target name="init-build"
			depends="clean"
			description="Creates VersionInfo.cs from the value specified at the command line or leaves the file as-is.">
		<asminfo language="CSharp"
				 output="source\VersionInfo.cs"
				 if="${version::parse(build.number) != version::parse(build.number.fromfile)}">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
			</imports>
			<attributes>
				<attribute type="AssemblyFileVersionAttribute"
						   value="${build.number}" />
				<attribute type="AssemblyVersionAttribute"
						   value="${build.number}" />
			</attributes>
		</asminfo>
	</target>

	<target name="build-plugins"
			depends="init-build"
			description="Compiles the plugins."
			unless="${property::exists('quick')}">
		<msbuild project="${basedir.app}\NOS.TabsMenu\NOS.TabsMenu.csproj"
				 target="${build.msbuild.target}"
				 verbosity="${build.msbuild.verbosity}">
			<arg value="/p:Configuration=${build.configuration}" />
			<arg value="/p:SolutionDir=${build.msbuild.solutiondir}" />
			<arg value="/p:build-runner=${build.runner}" />
			<arg value="/maxcpucount" />
		</msbuild>

		<msbuild project="${basedir.app}\NOS.Registration\NOS.Registration.csproj"
				 target="${build.msbuild.target}"
				 verbosity="${build.msbuild.verbosity}">
			<arg value="/p:Configuration=${build.configuration}" />
			<arg value="/p:SolutionDir=${build.msbuild.solutiondir}" />
			<arg value="/p:build-runner=${build.runner}" />
			<arg value="/maxcpucount" />
		</msbuild>
	</target>

	<!-- Theme.
	________________________________________________________________________________________________________________ -->
	<target name="init-build-theme"
			depends="clean, build-plugins, process-templates"
			description="Builds the theme.">
		<mkdir dir="${basedir.temp}\NOS.Wiki" />
	</target>

	<target name="build-theme"
			depends="init-build-theme"
			description="Builds the theme.">
		<!-- Copy content files. -->
		<copy todir="${basedir.temp}\NOS.Wiki\">
			<fileset basedir="${basedir.app}\NOS.Wiki">
				<include name="**\*.css" />
				<include name="**\*.js" />
				<include name="**\*.ico" />
				<include name="**\*.png" />
				<include name="**\*.gif" />
				<include name="**\*.jp?g" />
				<include name="**\*.htm?" />
				<include name="**\*.as?x" />
				<include name="**\*.cs" />
				<include name="**\*.txt" />
				<include name="**\*.dll" />
				<include name="**\*.resx" />
				<include name="**\*.swf" />
			</fileset>
		</copy>

		<!-- Copy plugins. -->
		<copy todir="${basedir.temp}\NOS.Wiki\public\Plugins"
			  flatten="true">
			<fileset basedir="${basedir.app}">
				<include name="**\*.dll" />
				<exclude name="${basedir.app}\NOS.Wiki" />
				<exclude name="**\ScrewTurn.Wiki.PluginFramework.dll" />
			</fileset>
		</copy>
		
		<copy todir="${basedir.temp}\NOS.Wiki\bin"
			  flatten="true">
			<fileset basedir="${basedir.app}\NOS.Registration\bin\${build.configuration}">
				<include name="*.dll" />
				<include name="*.pdb" />
				<exclude name="**\ScrewTurn.Wiki.PluginFramework.dll" />
			</fileset>
		</copy>
	</target>

	<!-- Unit tests.
	________________________________________________________________________________________________________________ -->
	<target name="build-tests"
			depends="init-build">
		<tc-progress message="Building tests"
					 type="Start" />

		<foreach item="File"
				 property="project">
			<in>
				<items>
					<include name="${basedir.test}/**/*.csproj" />
				</items>
			</in>
			<do>
				<msbuild project="${project}"
						 target="${build.msbuild.target}"
						 verbosity="${build.msbuild.verbosity}">
					<arg value="/p:Configuration=${build.configuration}" />
					<arg value="/p:SolutionDir=${build.msbuild.solutiondir}" />
					<arg value="/p:SolutionName=${project::get-name()}" />
					<arg value="/p:BuildRunner=${build.runner}" />
					<arg value="/maxcpucount" />
				</msbuild>
			</do>
		</foreach>

		<tc-progress message="Building tests"
					 type="End" />
	</target>

	<target name="init-run-tests"
			depends="build-tests">
		<mkdir dir="${basedir.test.results}"/>
		<mspec-initcounters />
	</target>

	<target name="run-tests"
			depends="init-run-tests"
			description="Runs the application's unit tests.">
		<tc-progress message="Running tests"
					 type="Start" />

		<foreach item="File"
				 property="assembly">
			<in>
				<items>
					<include name="${basedir.test}/**/bin/${build.configuration}/NOS.*.Tests.dll" />
				</items>
			</in>
			<do>
				<mspec report-directory="${basedir.test.results}"
					   report-filename="${path::get-file-name-without-extension(assembly)}.html"
					   workingdir="${path::get-directory-name(assembly)}"
					   include-time-info="true"
					   verbose="true">
					<assemblies>
						<include name="${assembly}" />
					</assemblies>
				</mspec>
			</do>
		</foreach>

		<tc-addstatistic-fromprops starting-with="${mspec::get-counter-prefix()}" />

		<tc-progress message="Running tests"
					 type="End" />
	</target>

	<!-- Setup.
	________________________________________________________________________________________________________________ -->
	<target name="init-build-setup"
			depends="clean">
		<mkdir dir="${basedir.deployment.artifacts}" />
	</target>

	<target name="build-setup"
			depends="init-build-setup, build-theme"
			description="Creates the applications' deployment package.">
		<zip zipfile="${basedir.deployment.artifacts}\Wiki-${build.number}.zip"
			 ziplevel="9"
			 duplicate="Preserve">

			<!-- Theme. -->
			<fileset basedir="${basedir.temp}\NOS.Wiki">
				<include name="**\*" />
			</fileset>
		</zip>
	</target>

	<!-- Deployment.
	________________________________________________________________________________________________________________ -->
	<target name="init-deploy">
		<fail message="Cannot deploy, property 'basedir.deployment.targetpath' is empty or does not exist. Please add it to your local.properties file (see local.properties.template for more information)."
			  if="${not property::exists('basedir.deployment.targetpath') or string::get-length(property::get-value('basedir.deployment.targetpath')) == 0}" />

		<mkdir dir="${basedir.deployment.targetpath}" />
	</target>

	<target name="deploy"
			depends="init-deploy, build-setup"
			description="Deploys the application.">
		<unzip zipfile="${basedir.deployment.artifacts}\Wiki-${build.number}.zip"
			   todir="${basedir.deployment.targetpath}" />
		<delete file="${basedir.deployment.targetpath}\App_Offline.htm"
				failonerror="false" />
		<touch file="${basedir.deployment.targetpath}\Web.config"
			   failonerror="false" />
	</target>
</project>