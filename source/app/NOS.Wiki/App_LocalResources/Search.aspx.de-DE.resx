<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblSearchInstructionsResource1.Text" xml:space="preserve">
    <value>Du kannst folgende Optionen verwenden:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Anführungszeichen, für eine Suche nach einer ganz bestimmten Zeichenfolge, zum Beispiel &lt;i&gt;&amp;quot;Hallo Welt&amp;quot;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;Sternchen, als Platzhalter für beliebige Zeichen, zum Beispiel &lt;i&gt;Hallo*&lt;/i&gt;&lt;/li&gt;&lt;li&gt;Fragezeichen, für ein einziges beliebiges Zeichen, zum Beispiel &lt;i&gt;H?llo&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="lblAllResource1.Text" xml:space="preserve">
    <value>Alle</value>
  </data>
  <data name="lblInvertResource1.Text" xml:space="preserve">
    <value>Umkehren</value>
  </data>
  <data name="lblNoneResource1.Text" xml:space="preserve">
    <value>Keine</value>
  </data>
  <data name="chkUncategorizedResource1.Text" xml:space="preserve">
    <value>Einträge ohne Kategorie</value>
    <comment>Uncategorized Pages</comment>
  </data>
  <data name="chkUncategorizedResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblCategoriesResource1.Text" xml:space="preserve">
    <value>Nach Kategorien filtern</value>
    <comment>Filter by Categories</comment>
  </data>
  <data name="lstCategoriesResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="btnGoResource1.Text" xml:space="preserve">
    <value>Suchen</value>
    <comment>Go</comment>
  </data>
  <data name="btnGoResource1.ToolTip" xml:space="preserve">
    <value>Klicken Sie hier um die Suche zu starten</value>
    <comment>Click here to start the search</comment>
  </data>
  <data name="chkFullSearchResource1.Text" xml:space="preserve">
    <value>Den gesamten Text durchsuchen (langsamer)</value>
    <comment>Full-text search (slower)</comment>
  </data>
  <data name="chkFullSearchResource1.ToolTip" xml:space="preserve">
    <value>Hier auswählen um den Inhalt und Titel der Seiten zu durchsuchen</value>
    <comment>Check this to search the pages title AND contents</comment>
  </data>
  <data name="lblDescriptionResource1.Text" xml:space="preserve">
    <value>Hier kann man die vorhandenen Seiten des Wiki durchsuchen.&lt;br /&gt;Das ist eine gute Möglichkeit um zu prüfen, ob bereits Inhalte, die angelegt werden sollen, schon im Wiki vorhanden sind.</value>
    <comment>Here you can search throught the pages of the Wiki.&lt;br /&gt;It's a good habit to perform a search before creating a new page that may already exist in the Wiki.</comment>
  </data>
  <data name="lblResultsResource1.Text" xml:space="preserve">
    <value />
  </data>
  <data name="lblSearchResource1.Text" xml:space="preserve">
    <value>Suche</value>
    <comment>Search</comment>
  </data>
  <data name="lblSearchTermsResource1.Text" xml:space="preserve">
    <value>Suchbegriffe</value>
    <comment>Search terms</comment>
  </data>
  <data name="PageResource1.Title" xml:space="preserve">
    <value>Unbennante Seite</value>
    <comment>Untitled Page</comment>
  </data>
  <data name="txtSearchResource1.Text" xml:space="preserve">
    <value />
  </data>
  <data name="txtSearchResource1.ToolTip" xml:space="preserve">
    <value>Geben Sie hier Ihre Suchbegriffe ein</value>
    <comment>Type here your search terms</comment>
  </data>
</root>